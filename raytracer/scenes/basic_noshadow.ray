
# Specify output dimensions.
Dimensions 640 480

# Same as gluPerspective.
Perspective 30.0 1.33 3 20

# Same as gluLookAt.
LookAt  1.2434  1.2533  9.8429 # eye position
        0.6500  0.3000 -0.9843 # focus position
       -0.0157  0.9921 -0.1243 # up vector

# Material specifications:
# The basic syntax is `Material "name"`, followed by pairs of string keys and
# numbers (or lists of numbers). The Material class is responsible for getting
# values from the parameter list. Any value omitted will be assumed to be 0.

# A highly reflective shiny red
Material "red"
    "ambient"   [1.0 0.0 0.0]
    "diffuse"   [1.0 0.0 0.0]
    "specular"  [1.0 1.0 1.0]
    "emission"  [0.0 0.0 0.0]
    "shininess" 500.0 # specular exponent
    "shadow"    0.7 # shadow factor [0 = no shadow, 1= black shadow, 0..1 added to surface color]
    "reflect"   0.8 # reflection factor [0 = no reflection, 1=full reflection, 0..1 added to surface color]

# Moderately reflective shiny pink
Material "pink"
    "ambient"   [1.0 0.0 0.95]
    "diffuse"   [1.0 0.0 0.95]
    "specular"  [1.0 1.0 1.0]
    "emission"  [0.0 0.0 0.0]
    "shininess" 80.0
    "shadow"    0.2
    "reflect"   0.3

# Diffuse white
Material "white1"
    "ambient"   [1.0 1.0 1.0]
    "diffuse"   [1.0 1.0 1.0]
    "specular"  [0.1 0.1 0.1]
    "emission"  [0.0 0.0 0.0]
    "shininess" 10.0
    "shadow"    1
    "reflect"   0

# Somewhat shiny orange
Material "orange"
    "ambient"   [1.0 0.6 0.07]
    "diffuse"   [1.0 0.6 0.07]
    "specular"  [1.0 1.0 1.0]
    "emission"  [0.0 0.0 0.0]
    "shininess" 100.0
    "shadow"    0.8
    "reflect"   0

# Somewhat shiny blue.
Material "blue"
    "ambient"   [0.0 0.89 0.93]
    "diffuse"   [0.0 0.89 0.93]
    "specular"  [0.5 0.5 0.5]
    "emission"  [0.0 0.0 0.0]
    "shininess" 25.0
    "shadow"    0.8
    "reflect"   0.2

# Highly diffuse white
Material "white"
    "ambient"   [0.1 0.1 0.1]
    "diffuse"   [2.0 2.0 2.0]
    "specular"  [0 0 0]
    "emission"  [0 0 0]
    "shininess" 0.0
    "shadow"    1
    "reflect"   0.0


# Transformations:
# `PushMatrix`, `PopMatrix`, `Translate`, `Rotate`, and `Scale` act like their
# OpenGL counterparts.

# Object specifications:
# Sphere radius "material"
# Plane "material"

PushMatrix
    Translate 2.5 0.5 -3.0
    Rotate 40 0 1 0
    Scale 1 5 5
    Sphere 0.5 "red"
PopMatrix

PushMatrix
    Translate -1.0 1.2 -1.75
    Sphere 1.75 "pink"
PopMatrix

PushMatrix
    Translate 0.5 -0.75 0.25
    Sphere 0.5 "white1"
PopMatrix

# Floor
PushMatrix
    Translate 0 -1.25 0
    Rotate -90 1 0 0
    Plane "white"
PopMatrix


# Triangle mesh objects can be specified as well.
# To load a mesh from a .OBJ file, the following specification is used:
# Mesh "material" "path/to/file.obj"
PushMatrix
    Translate 2.5 0.2 0.5
    Scale 0.4 0.4 0.4
    Rotate 90 0 1 0
    Rotate 45 1 0 0
    Mesh "blue" "meshes/icosahedron.obj"
PopMatrix

# You can also specify meshes inline as follows:
# Mesh "material" [numFaces] [list of position indices] "P" [
#   list
#   of
#   vertex
#   positions
# ]
PushMatrix
    Translate -1.0 -1.25 2.5
    Rotate -60 1 0 0
    Rotate -10 0 1 0
    Mesh "orange" [3] [0 1 2] "P" [
        0 0 0
        1 0 0
        0 1 0
    ]
PopMatrix


# ALthough not implemented in the example solution, 
# the parser will also respond to conics (optional):
Conic 0 0.5 -1 1 "orange" # `Conic radius1 radius2 zMin zMax "material"`


# Lighting specifications.
# Basic syntax is `PointLight x y z`, followed by a parameter list (which the
# PointLight class pulls values from).

PointLight 2 10 2            # position [x y z]
    "ambient"     [0.1 0.1 0.1]    # ambient color [r g b]
    "diffuse"     [8.0 8.0 12.0] # diffuse color 
    "specular"    [20.0 20.0 20.0] # specular color
    "attenuation" [1.8 3.0 0.0]    # attenuation [constant linear square]

PointLight 10 10 15 
    "ambient"     [0.1 0.1 0.1]
    "diffuse"     [9.0 9.0 3.0]
    "specular"    [20.0 20.0 20.0]
    "attenuation" [1.8 3.0 0.0]




